// const ary = [1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]
// const ary2 = [1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]
//   .map(each => ({ num: each }) )

// const sort = (ary, left=0, right = ary.length - 1) => {
//   if (left === right) return
//   const pivot = ary[left]
//   let curPivotIdx = left
//   for (let i = left; i <= right; i++) {
//     if (ary[i] < pivot) {
//       ary.splice( left, 0, ary.splice(i, 1)[0] )
//       curPivotIdx++
//     }
//   }
//   sort(ary, left, curPivotIdx)
//   sort(ary, curPivotIdx+1, right)
//   return ary
// }
// console.log(sort(ary))
type Comparable = string | number | Date | boolean | bigint;

function sort2<T extends Comparable>(array: T[], sortValue?: (item: T) => Comparable, reverse?: boolean): T[]
function sort2<T>(array: T[], sortValue: (item: T) => Comparable, reverse?: boolean): T[]
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function sort2<T>(array: T[], sortValue: (item: T) => Comparable = (item: any) => item, reverse = false): T[] {
  const condition = (item:T, pivot:T) => reverse
    ? sortValue(item) > sortValue(pivot)
    : sortValue(item) < sortValue(pivot)

  if (!array[0]) return array
  const [pivot, ...rest] = array
  const [left, right] = rest
    .reduce((sorted:[T[], T[]], item:T) => {
      condition(item, pivot)
        ? sorted[0].push(item)
        : sorted[1].push(item)
      return sorted
    }, [[], []])
  return [
    ...sort2(left, sortValue, reverse),
    pivot,
    ...sort2(right, sortValue, reverse)
  ]
}
// const x = sort2(ary2, val => val.num, true)
// x

export default sort2